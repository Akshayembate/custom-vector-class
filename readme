Custom Vector Implementation in C++
Overview
This project is an implementation of a custom vector-like data structure in C++, inspired by the Standard Template Library's (STL) std::vector. The custom vector is designed to dynamically manage a collection of elements, providing automatic memory management and supporting a variety of operations such as adding, removing, and accessing elements.

This implementation demonstrates advanced C++ features such as move semantics, dynamic memory management, and template programming.

Features
Dynamic Array Management: Automatically resizes as new elements are added.
Move Semantics: Efficiently handles resources by moving rather than copying.
Placement New: Constructs objects in pre-allocated memory to avoid unnecessary temporary object creation.
Pop and Clear Operations: Supports removing elements and clearing the vector.
EmplaceBack Operation: Constructs elements in place using perfect forwarding.
Custom Destructor: Ensures proper cleanup of resources, preventing memory leaks.
Usage
Vector Class
The Vector class template is the core of this project, providing a dynamically resizable array with the following methods:

pushBack: Adds an element to the end of the vector. Can accept both lvalues and rvalues.
emplaceBack: Constructs an element in place at the end of the vector, avoiding unnecessary copies or moves.
popBack: Removes the last element from the vector and calls its destructor.
clear: Clears the vector by destroying all elements.
reserve: Preallocates memory for a specified number of elements, reducing the number of reallocations.
operator[]: Provides access to elements by index.
Size: Returns the current number of elements in the vector.
Vector3 Struct
The Vector3 struct represents a 3D vector with x, y, and z coordinates. It includes:

Constructors: Multiple constructors for different initialization scenarios.
Copy and Move Semantics: Support for copying and moving, including deep copying of internal resources.
Custom Destructor: Ensures proper cleanup of dynamically allocated memory.

Building and Running
Clone the repository
git clone https://github.com/your-username/your-repository-name.git

Navigate to the project directory:
cd custom-vector-class

Compile the code:
g++ -std=c++11 -I include main.cpp -o vector_example

Run the program:
./vector_example